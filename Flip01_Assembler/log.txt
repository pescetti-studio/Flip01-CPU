



> UP 23 
> RIGHT 24 
> DOWN 25 
> LEFT 26 




< R0 23 
< R1 24 
< R2 25 
< R3 26 
< R4 27 
< R5 28 
< R6 29 
< R7 30 



< TEL 04 

< REL 05 

< BEL 06 

< LEL 07 


< RST 31 



PosY = 1 
Cursor = 64 


load$ AX 1 
output AX RST 
load AX Cursor 
save AX 
output AX R1 
load BX PosY 


Loop: 

input AX UP 
cmp$ AX 1 
je MoveUp 

input AX RIGHT 
cmp$ AX 1 
je MoveRight 

input AX DOWN 
cmp$ AX 1 
je MoveDown 

input AX LEFT 
cmp$ AX 1 
je MoveLeft 

jmp Loop 

MoveUp: 
load$ BX 2 
output AX TEL 
read BX 

cmp$ BX 0 
je LedUpOn 



cmp$ BX 1 
je OutputR1 
cmp$ BX 2 
je OutputR2 
cmp$ BX 3 
je OutputR3 
cmp$ BX 4 
je OutputR4 
cmp$ BX 5 
je OutputR5 
cmp$ BX 6 
je OutputR6 
cmp$ BX 7 
je OutputR7 

dec BX 
store BX PosY 

MoveRight: 
jmp Loop 

MoveDown: 
load$ BX 2 
output AX BEL 
read BX 

cmp$ BX 7 
je LedDownOn 

inc BX 
store BX PosY 

cmp$ BX 0 
je OutputR0 
cmp$ BX 1 
je OutputR1 
cmp$ BX 2 
je OutputR2 
cmp$ BX 3 
je OutputR3 
cmp$ BX 4 
je OutputR4 
cmp$ BX 5 
je OutputR5 
cmp$ BX 6 
je OutputR6 

MoveLeft: 
jmp Loop 

LedUpOn: 
load$ BX 2 
output BX TEL 
jmp Loop 

LedRightOn: 
load$ BX 2 
output BX REL 
jmp Loop 

LedDownOn: 
load$ BX 2 
output BX BEL 
jmp Loop 

LedLeftOn: 
load$ BX 2 
output BX LEL 
jmp Loop 

OutputR0: 
output AX R0 
jmp Loop 
OutputR1: 
output AX R1 
jmp Loop 
OutputR2: 
output AX R2 
jmp Loop 
OutputR3: 
output AX R3 
jmp Loop 
OutputR4: 
output AX R4 
jmp Loop 
OutputR5: 
output AX R5 
jmp Loop 
OutputR6: 
output AX R6 
jmp Loop 
OutputR7: 
output AX R7 
jmp Loop 








